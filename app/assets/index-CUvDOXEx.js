import{i as d}from"./index-4bIZTkwu.js";const f="Request canceled";async function T(p,e){const r=e==null?void 0:e.signal;if(r!=null&&r.aborted)throw new Error(f);const w=e==null?void 0:e.maxRedirections,l=e==null?void 0:e.connectTimeout,m=e==null?void 0:e.proxy;e&&(delete e.maxRedirections,delete e.connectTimeout,delete e.proxy);const o=e!=null&&e.headers?e.headers instanceof Headers?e.headers:new Headers(e.headers):new Headers,a=new Request(p,e),h=await a.arrayBuffer(),b=h.byteLength!==0?Array.from(new Uint8Array(h)):null;for(const[c,s]of a.headers)o.get(c)||o.set(c,s);const A=(o instanceof Headers?Array.from(o.entries()):Array.isArray(o)?o:Object.entries(o)).map(([c,s])=>[c,typeof s=="string"?s:s.toString()]);if(r!=null&&r.aborted)throw new Error(f);const u=await d("plugin:http|fetch",{clientConfig:{method:a.method,url:a.url,headers:A,data:b,maxRedirections:w,connectTimeout:l,proxy:m}}),y=()=>d("plugin:http|fetch_cancel",{rid:u});if(r!=null&&r.aborted)throw y(),new Error(f);r==null||r.addEventListener("abort",()=>void y());const{status:R,statusText:E,url:x,headers:H,rid:_}=await d("plugin:http|fetch_send",{rid:u}),t=await d("plugin:http|fetch_read_body",{rid:_}),n=new Response(t instanceof ArrayBuffer&&t.byteLength!==0?t:t instanceof Array&&t.length>0?new Uint8Array(t):null,{status:R,statusText:E});return Object.defineProperty(n,"url",{value:x}),Object.defineProperty(n,"headers",{value:new Headers(H)}),n}export{T as fetch};
